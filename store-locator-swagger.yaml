swagger: "2.0"
info:
  description: "This is a REST API application for Creating/Updating/Deleting/Searching store details.The store details are saved in a json file inside the spring boot application.The application also supports filtering of stores on the basis of location,country,within a defined radius and currently open.
  If authentication is enabled, when calling the APIs use api-key:testapikey to authenticate"
  version: "1.0.0"
  title: "Store Locator API"
  termsOfService: "http://swagger.io/terms/"
  contact:
    email: "rajeshsnair@gmail.com"

  license:
    name: "Apache 2.0"
    url: "http://www.apache.org/licenses/LICENSE-2.0.html"
host: "localhost:9900"
basePath: "/storelocator"
tags:
- name: "Store Locator"
  description: "Store Locator base url: /storelocator"
 
paths:
  /stores:
    post:
      tags:
      - "store-locator-controller"
      summary: "create a or multiple store(s) with store details"
      description: ""
      operationId: "addStore"
      consumes:
      - "application/json"
      - "application/xml"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "Stores object that needs to be added to the store"
        required: true
        schema:
          $ref: "#/definitions/Stores"
      responses:
        "405":
          description: "Invalid input"
      security:
      - api_key: []
  
  /stores/{store-id}:
    put:
      tags:
      - "store-locator-controller"
      summary: "Update an existing Store"
      description: ""
      operationId: "updateStore"
      consumes:
      - "application/json"
      - "application/xml"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - name: "store-id"
        in: "path"
        description: "ID of the order that needs to be deleted"
        required: true
        type: "integer"
        minimum: 1.0
        format: "int64" 
      - in: "body"
        name: "body"
        description: "Store object that needs to be updated to the list of stores"
        required: true
        schema:
          $ref: "#/definitions/Stores"
      responses:
        "400":
          description: "Invalid ID supplied"
        "404":
          description: "Store not found"
        "405":
          description: "Validation exception"
      security:
      - api_key: []
      
  /stores/:
    get:
      tags:
      - "store-locator-controller"
      summary: "Finds All Stores with Store Details"
      description: "Multiple status values can be provided with comma separated strings"
      operationId: "getStores"
      produces:
        - "application/json"
      
      responses:
        "200":
          description: "successful operation"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/Stores"
        "400":
          description: "Bad Request"
      security:
       - api_key: []
       
  /stores/city:
    get:
      tags:
      - "store-locator-controller"
      summary: "Finds Store by City"
      description: "Find list of stores in a particular City"
      operationId: "getStores?city"
      produces:
      - "application/json"
      parameters:
      - name: "city"
        in: "query"
        description: "Tags to filter by"
        required: true
        type: "string"
        
      responses:
        "200":
          description: "successful operation"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/Stores"
        "400":
          description: "Invalid city value"
      security:
        - api_key: []
      
  /stores/country:
    get:
      tags:
      - "store-locator-controller"
      summary: "Find Store by Country"
      description: "Finds list of Stores in a particular country"
      operationId: "getStores?country"
      produces:
      - "application/json"
      parameters:
      - name: "country"
        in: "query"
        description: "country to be searched"
        required: true
        type: "string"
      responses:
        "200":
          description: "successful operation"
          schema:
            $ref: "#/definitions/Stores"
        "400":
          description: "Bad Request"
        "404":
          description: "Stores not found"
      security:
      - api_key: []
      
  /stores/current:
    get:
      tags:
      - "store-locator-controller"
      summary: "Find Store which are open currently"
      description: "Finds list of Stores at current time"
      operationId: "getStores?current"
      produces:
      - "application/json"
      parameters:
      - name: "current"
        in: "query"
        description: "To search currently open stores"
        required: true
        type: "string"
      responses:
        "200":
          description: "successful operation"
          schema:
            $ref: "#/definitions/Stores"
        "400":
          description: "Bad Request"
        "404":
          description: "Stores not found"
      security:
      - api_key: []  
  
  /stores/{store_id}:    
    delete:
      tags:
      - "store-locator-controller"
      summary: "Delete a Store by Store Id"
      description: "For valid response try integer IDs with positive integer value.         Negative or non-integer values will generate API errors"
      operationId: "deleteStore"
      produces:
      - "application/json"
      parameters:
      - name: "store_id"
        in: "path"
        description: "ID of the order that needs to be deleted"
        required: true
        type: "integer"
        minimum: 1.0
        format: "int64"
      responses:
        "400":
          description: "Invalid ID supplied"
        "404":
          description: "Store not found"
  
securityDefinitions:
  api_key:
    type: "apiKey"
    name: "api-key"
    in: "header"
    
definitions:
  Stores:
    type: "object"
    properties:
      id:
        type: "integer"
        format: "int64"
      petId:
        type: "integer"
        format: "int64"
      quantity:
        type: "integer"
        format: "int32"
      shipDate:
        type: "string"
        format: "date-time"
      status:
        type: "string"
        description: "Order Status"
        enum:
        - "placed"
        - "approved"
        - "delivered"
      complete:
        type: "boolean"
        default: false
    xml:
      name: "Order"
  Category:
    type: "object"
    properties:
      id:
        type: "integer"
        format: "int64"
      name:
        type: "string"
    xml:
      name: "Category"
  User:
    type: "object"
    properties:
      id:
        type: "integer"
        format: "int64"
      username:
        type: "string"
      firstName:
        type: "string"
      lastName:
        type: "string"
      email:
        type: "string"
      password:
        type: "string"
      phone:
        type: "string"
      userStatus:
        type: "integer"
        format: "int32"
        description: "User Status"
    xml:
      name: "User"
  Tag:
    type: "object"
    properties:
      id:
        type: "integer"
        format: "int64"
      name:
        type: "string"
    xml:
      name: "Tag"
  Pet:
    type: "object"
    required:
    - "name"
    - "photoUrls"
    properties:
      id:
        type: "integer"
        format: "int64"
      category:
        $ref: "#/definitions/Category"
      name:
        type: "string"
        example: "doggie"
      photoUrls:
        type: "array"
        xml:
          name: "photoUrl"
          wrapped: true
        items:
          type: "string"
      tags:
        type: "array"
        xml:
          name: "tag"
          wrapped: true
        items:
          $ref: "#/definitions/Tag"
      status:
        type: "string"
        description: "pet status in the store"
        enum:
        - "available"
        - "pending"
        - "sold"
    xml:
      name: "Pet"
  ApiResponse:
    type: "object"
    properties:
      code:
        type: "integer"
        format: "int32"
      type:
        type: "string"
      message:
        type: "string"
externalDocs:
  description: "Find out more about Swagger"
  url: "http://swagger.io"